# Generated by Django 3.2.7 on 2021-11-03 10:59

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contents', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('condominium', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Prénom')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Nom')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Adresse email')),
                ('user_type', models.CharField(choices=[('OWNER OCCUPIER', 'Copropriétaire occupant'), ('OWNER LESSOR', 'Copropriétaire bailleur'), ('TENANT', 'Locataire'), ('SYNDIC', 'Syndic')], default='OWNER OCCUPIER', max_length=20, verbose_name="Catégorie d'utilisateur")),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('VALIDATED', 'Validé')], default='PENDING', max_length=15, verbose_name='Statut')),
                ('is_resident', models.BooleanField(default=True, verbose_name='Résident')),
                ('is_union_council', models.BooleanField(default=False, verbose_name='Membre du Conseil Syndical')),
                ('is_active', models.BooleanField(default=True, verbose_name='Utilisateur actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Administrateur')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Super administrateur')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Dernière connexion')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Inscription')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/', validators=[django.core.validators.FileExtensionValidator(['gif', 'jpeg', 'jpg', 'png'])], verbose_name='Avatar')),
                ('about', models.TextField(blank=True, max_length=2000, null=True, verbose_name='A propos de moi')),
                ('contact_email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Adresse email de contact')),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(regex='^0\\d{9}$')], verbose_name='Téléphone')),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('comment_to_delete', models.ManyToManyField(related_name='comment_delete', through='contents.CommentDelete', to='contents.Comment')),
                ('event_to_delete', models.ManyToManyField(related_name='event_delete', through='contents.EventDelete', to='contents.Event')),
                ('event_to_update', models.ManyToManyField(related_name='event_update', through='contents.EventUpdate', to='contents.Event')),
                ('faq_to_delete', models.ManyToManyField(related_name='faq_delete', through='contents.FaqDelete', to='contents.Faq')),
                ('faq_to_update', models.ManyToManyField(related_name='faq_update', through='contents.FaqUpdate', to='contents.Faq')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('incident_to_delete', models.ManyToManyField(related_name='incident_delete', through='contents.IncidentDelete', to='contents.Incident')),
                ('lot_owned', models.ManyToManyField(related_name='lot_owned', through='condominium.Ownership', to='condominium.Lot')),
                ('news_to_delete', models.ManyToManyField(related_name='news_delete', through='contents.NewsDelete', to='contents.News')),
                ('news_to_update', models.ManyToManyField(related_name='news_update', through='contents.NewsUpdate', to='contents.News')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-date_joined', '-updated_at'),
            },
        ),
    ]
